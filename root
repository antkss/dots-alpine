#!/bin/bash


contains_text_nocase() {
  local search_text="$1"
  local file_path="$2"

  if [ -z "$search_text" ] || [ -z "$file_path" ]; then
    echo "Usage: contains_text_nocase \"search_text\" \"path/to/file\""
    return 1
  fi

  if [ ! -f "$file_path" ]; then
    return 1
  fi

  grep -qiF "$search_text" "$file_path"
  return $?
}
check_required_tools() {
  for cmd in mount umount mkdir rmdir mountpoint basename grep; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      echo "Error: Required command '$cmd' not found."
      exit 1
    fi
  done
}
check_required_tools
chroot_path=$1
if [ -z $chroot_path ]; then
	echo "usage: $0 <chroot_path>"
	exit 1
elif [ ! -d $chroot_path ]; then
	echo "chroot_path doesn't exist !"
	exit 1
elif [ "$(id -u)" -ne 0 ]; then
    echo "Please run as root"
    exit 1
fi
chroot_path=$(realpath -m $chroot_path)
LOCK="$chroot_path/.chroot.lock"
LOCK_INSTANCE="/tmp/lock_instance"
MOUNT_POINTS=(/sys /dev /proc /tmp /run)
MOUNTLIST="$chroot_path/.mountlist.txt"
INSTANCE="instance_$chroot_path"
TARGET="${2:-$chroot_path}"

if contains_text_nocase $INSTANCE $LOCK_INSTANCE; then
	echo "yo "
else
	if [ -f $MOUNTLIST ]; then
		rm $MOUNTLIST
	fi
	if [ -f $LOCK ]; then 
		rm $LOCK
	fi
fi

# Use $1 (command) + current timestamp + random number as unique suffix for mountlist file
# Or user can provide an ID, else default to timestamp+pid
# MOUNT_POINTS=(/sys /dev /proc /dev/pts /dev/shm /dev/mqueue /sys/kernel/security /sys/kernel/debug /sys/fs/pstore /sys/firmware/efi/efivars /sys/fs/bpf /tmp /proc/sys/fs/binfmt_misc /sys/fs/cgroup /run)

join_path() {
    case "$1" in
        */) first="$1" ;;
        *) first="$1/" ;;
    esac

    case "$2" in
        /*) second="${2#*/}" ;;  # remove leading slash to avoid breaking join
        *) second="$2" ;;
    esac

    printf "%s%s\n" "$first" "$second"
}
debug=0
mount_specials() {
	TARGET_ROOT="$chroot_path"  # Change this as needed

	for src in ${MOUNT_POINTS[@]}; do
		dest=$TARGET_ROOT$src
		# echo $dest

		# Check if already mounted
		if grep -q "^[^ ]\+ $dest " /proc/mounts; then
			echo "Already mounted: $dest"
			continue
		fi
		#
		# Create the target directory if it doesn't exist
		if [ ! -d "$dest" ]; then
			mkdir -p "$dest" || {
				echo "Failed to create $dest" >&2
				continue
			}
		fi

		# Perform the bind mount
		if mount --rbind "$src" "$dest"; then
			if [ $debug != 0 ]; then
				echo "Mounted $src -> $dest"
			fi
			echo $dest >> $MOUNTLIST
		else
			echo "Failed to mount $src" >&2
		fi
	done
}

unmount_specials() {
  if [ ! -f "$MOUNTLIST" ]; then
	if [ $debug != 0 ]; then
		echo "Mount list file $MOUNTLIST not found. Nothing to unmount."
	fi
	return
  fi

	if [ $debug != 0 ]; then
	  echo "Unmounting special filesystems listed in $MOUNTLIST"
	fi
  tac "$MOUNTLIST" | while read -r mnt; do
    if mountpoint -q "$mnt"; then
		if [ $debug != 0 ]; then
		  echo "Unmounting $mnt"
		fi
      umount -l -R "$mnt" || echo "Failed to unmount $mnt"
    else
		if [ $debug != 0 ]; then
		  echo "$mnt not mounted, skipping"
		fi
    fi
  done
  rm -f "$MOUNTLIST"
	if [ $debug != 0 ]; then
	  echo "Unmounting complete."
	fi
}


push() {
    echo "$1" >> $2
}
pop() {
    if [ -s $1 ]; then
        last=$(tail -n 1 $1)
        # remove last line
        sed -i '$d' $1
    fi
}
cleanup() {
	pop $LOCK
	pop $LOCK_INSTANCE
	if [ ! -s $LOCK ]; then
		echo "cleaning ..."
		unmount_specials $ID
	fi

}
when_no_instance() {
	push $INSTANCE $LOCK_INSTANCE
	mount_specials
	rm $chroot_path/etc/mtab
	cp /proc/self/mounts $chroot_path/etc/mtab
}
# Trap termination signals
trap cleanup SIGINT SIGTERM SIGHUP EXIT
echo "entering $chroot_path ..."
if [ ! -s $LOCK ]; then
	when_no_instance
fi
push "r" $LOCK
env -i $(env) PATH=$PATH:/sbin:/usr/sbin:/usr/bin:/bin chroot $chroot_path
